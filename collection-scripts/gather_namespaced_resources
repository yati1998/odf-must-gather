#!/usr/bin/env bash

# Expect base collection path as an exported variable
# If it is not defined, use PWD instead
BASE_COLLECTION_PATH=${BASE_COLLECTION_PATH:-"$(pwd)"}

# Make a global variable for namespace
INSTALL_NAMESPACES=$(oc get storagecluster -A --no-headers | awk '{print $1}')
PRODUCT_NAMESPACE=$(oc get managedFusionOffering -A --no-headers | awk '{print $1}')
OPERATOR_NAMESPACE=$(oc get subscription -A --no-headers | awk '{print $1}' | grep odf-operator)
MANAGED_FUSION_NAMESPACE=$(oc get secrets -A --no-headers | grep managed-fusion-agent-config | awk '{print $1}')

# Add general resources to list if necessary

# Resource List
resources=()
# collect storagecluster resources

# TODO: Re enable the collection of storagecluster via inspect command
# resources+=(storageclusters)
# resources+=(storagesystem)

# collect OB/OBC resoureces
resources+=(objectbuckets)

# collection path for OC commands
mkdir -p "${BASE_COLLECTION_PATH}/oc_output/"

# Command List
commands_get=()

# collect oc output of OC get commands
commands_get+=("subscription")
commands_get+=("csv")
commands_get+=("catalogsource")
commands_get+=("installplan")
commands_get+=("all -o wide")
commands_get+=("role")
commands_get+=("hpa")
commands_get+=("secrets")
commands_get+=("configmap")
commands_get+=("rolebinding")
commands_get+=("storageconsumer")
commands_get+=("storageprofiles")
commands_get+=("storageclassrequest")
commands_get+=("alertmanager")
commands_get+=("alertmanagerconfig")
commands_get+=("prometheus")
commands_get+=("cephfilesystemsubvolumegroups.ceph.rook.io")

# collect oc output of OC desc commands
commands_desc=()
commands_desc+=("pods")
commands_desc+=("hpa")
commands_desc+=("subscription")
commands_desc+=("storagecluster")
commands_desc+=("storageconsumer")
commands_desc+=("storageprofiles")
commands_desc+=("storageclassrequest")
commands_desc+=("alertmanager")
commands_desc+=("prometheus")
commands_desc+=("alertmanagerconfig")
commands_desc+=("cephfilesystemsubvolumegroups.ceph.rook.io")

# collect yaml output of OC commands
oc_yamls=()
oc_yamls+=("csv")
oc_yamls+=("hpa")
oc_yamls+=("subscription")
oc_yamls+=("installplan")
oc_yamls+=("storageclassrequest")
oc_yamls+=("alertmanager")
oc_yamls+=("prometheus")
oc_yamls+=("alertmanagerconfig")

for INSTALL_NAMESPACE in $PRODUCT_NAMESPACE $INSTALL_NAMESPACES $MANAGED_FUSION_NAMESPACE $OPERATOR_NAMESPACE; do
     dbglog "collecting dump of namespace ${INSTALL_NAMESPACE}"
     { oc adm --dest-dir="${BASE_COLLECTION_PATH}" inspect ns/"${INSTALL_NAMESPACE}" --"${SINCE_TIME}" 2>&1; } | dbglog
     dbglog "collecting dump of clusterresourceversion"
     for oc_yaml in "${oc_yamls[@]}"; do
          # shellcheck disable=SC2129
          { oc adm --dest-dir="${BASE_COLLECTION_PATH}" inspect "${oc_yaml}" -n "${INSTALL_NAMESPACE}" --"${SINCE_TIME}" 2>&1; } | dbglog
     done

     # Create the dir for oc_output
     mkdir -p "${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/"

     # Run the Collection of Resources to list
     for command_get in "${commands_get[@]}"; do
          dbglog "collecting oc command ${command_get}"
          COMMAND_OUTPUT_FILE=${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/${command_get// /_}
          # shellcheck disable=SC2086
          { oc get ${command_get} -n ${INSTALL_NAMESPACE}; } >>"${COMMAND_OUTPUT_FILE}"
     done

     # Run the Collection of OC desc commands
     for command_desc in "${commands_desc[@]}"; do
          dbglog "collecting oc describe command ${command_desc}"
          COMMAND_OUTPUT_FILE=${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/${command_desc// /_}
          # shellcheck disable=SC2086
          { oc describe ${command_desc} -n ${INSTALL_NAMESPACE}; } >>"${COMMAND_OUTPUT_FILE}"
     done
done

# NOTE: This is a temporary fix for collecting the storagecluster as we are not able to collect the storagecluster using the inspect command
{ oc get storageclusters -n "${INSTALL_NAMESPACE}" -o yaml; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/storagecluster.yaml" 2>&1
{ oc get storagesystem -n "${INSTALL_NAMESPACE}" -o yaml; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/storagesystem.yaml" 2>&1
{ oc get storageconsumer -n "${INSTALL_NAMESPACE}" -o yaml; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/storageconsumer.yaml" 2>&1

# Collect oc get events with sorted timestamp
dbglog "collecting output of oc get events with sorted timestamp"
{ oc get event -o custom-columns="LAST SEEN:{lastTimestamp},FIRST SEEN:{firstTimestamp},COUNT:{count},NAME:{metadata.name},KIND:{involvedObject.kind},SUBOBJECT:{involvedObject.fieldPath},TYPE:{type},REASON:{reason},SOURCE:{source.component},MESSAGE:{message}" --sort-by=lastTimestamp -n openshift-storage; } >"${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/events_get" 2>&1
events=$(timeout 60 oc get events -n openshift-storage -o custom-columns="NAME:{metadata.name}" --sort-by=lastTimestamp --no-headers)
for event in "${events[@]}"; do
     { oc describe events "${event}" -n openshift-storage >> "${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/events_desc"; }
     { oc get events "${event}" -n openshift-storage -o yaml >> "${BASE_COLLECTION_PATH}/namespaces/${INSTALL_NAMESPACE}/oc_output/events_yaml"; }
done

# Create the dir for data from all namespaces
mkdir -p "${BASE_COLLECTION_PATH}/namespaces/all/"

# Run the Collection of Resources using must-gather
for resource in "${resources[@]}"; do
     dbglog "collecting dump of ${resource}"
     { oc adm --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" inspect "${resource}" --all-namespaces --"${SINCE_TIME}" 2>&1; } | dbglog
done

# For pvc of all namespaces
dbglog "collecting dump of oc get pvc all namespaces"
{ oc get pvc --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/pvc_all_namespaces"
{ oc adm --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" inspect pvc --all-namespaces --"${SINCE_TIME}" 2>&1; } | dbglog

# For volumesnapshot of all namespaces
dbglog "collecting dump of oc get volumesnapshot all namespaces"
{ oc get volumesnapshot --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_volumesnapshot_all_namespaces"
{ oc describe volumesnapshot --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_volumesnapshot_all_namespaces"
{ oc adm --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" inspect volumesnapshot --all-namespaces --"${SINCE_TIME}" 2>&1; } | dbglog

# For obc of all namespaces
dbglog "collecting dump of oc get obc all namespaces"
{ oc get obc --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/obc_all_namespaces"
{ oc adm --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" inspect obc --all-namespaces --"${SINCE_TIME}" 2>&1; } | dbglog

# For VolumeReplication of all namespaces
dbglog "collecting dump of oc get volumereplication all namespaces"
{ oc get volumereplication --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/vr_all_namespaces"
{ oc adm --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" inspect volumereplication --all-namespaces --"${SINCE_TIME}" 2>&1; } | dbglog

# For VolumeReplicationGroups of all namespaces
dbglog "collecting dump of oc get volumereplicationgroups all namespaces"
{ oc get volumereplicationgroups --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/vrg_all_namespaces"
{ oc adm --dest-dir="${BASE_COLLECTION_PATH}/namespaces/all/" inspect vrg --all-namespaces --"${SINCE_TIME}" 2>&1; } | dbglog

# Collect details of storageclassclaim of all namespaces for managed services
dbglog "collecting dump of oc get storageclassclaim all namespaces"
if [ -n "$(oc get storageclassclaim --no-headers -A | awk '{print $2}')" ]; then
     { oc get storageclassclaim --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_storageclassclaim_all_ns"
     { oc describe storageclassclaim --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_storageclassclaim_all_ns"
     { oc get storageclassclaim -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_yaml_storageclassclaim_all_ns"
fi

# Collect details of managedfusionoffering of all namespaces for managed services
echo "collecting dump of oc get managedfusionoffering all namespaces" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"
if [ -n "$(oc get managedfusionoffering --no-headers -A | awk '{print $1}')" ]; then
     { oc get managedfusionoffering --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_managedfusionoffering_all_ns"
     { oc describe managedfusionoffering --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_managedfusionoffering_all_ns"
     { oc get managedfusionoffering -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_yaml_managedfusionoffering_all_ns"
fi

# Collect csi-addons object details of all namespaces
dbglog "collecting dump of oc get csiaddonsnode all namespaces"
if [ -n "$(oc get csiaddonsnode --no-headers -A | awk '{print $2}')" ]; then
     { oc get csiaddonsnode --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_csiaddonsnode_all_ns"
     { oc describe csiaddonsnode --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_csiaddonsnode_all_ns"
     { oc get csiaddonsnode -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_yaml_csiaddonsnode_all_ns"
fi

dbglog "collecting dump of oc get reclaimspacejob all namespaces"
if [ -n "$(oc get reclaimspacejob --no-headers -A | awk '{print $1}')" ]; then
     { oc get reclaimspacejob --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_reclaimspacejob_all_ns"
     { oc describe reclaimspacejob --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_reclaimspacejob_all_ns"
     { oc get reclaimspacejob -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_yaml_reclaimspacejob_all_ns"
fi

dbglog "collecting dump of oc get reclaimspacecronjobs all namespaces"
if [ -n "$(oc get reclaimspacejob --no-headers -A | awk '{print $1}')" ]; then
     { oc get reclaimspacecronjobs --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_reclaimspacecronjobs_all_ns"
     { oc describe reclaimspacecronjobs --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_reclaimspacecronjobs_all_ns"
     { oc get reclaimspacecronjobs -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_yaml_reclaimspacecronjobs_all_ns"
fi

dbglog "collecting dump of oc get networkfence all namespaces"
if [ -n "$(oc get networkfence --no-headers -A | awk '{print $1}')" ]; then
     { oc get networkfence --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_networkfence_all_ns"
     { oc describe networkfence --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_networkfence_all_ns"
     { oc get networkfence -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_yaml_networkfence_all_ns"
fi

echo "collecting network-attachment-definitions of oc get network-attachment-definitions all namespaces" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"
if [ -n "$(oc get network-attachment-definitions --no-headers -A | awk '{print $1}')" ]; then
     { oc get network-attachment-definitions -oyaml --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/get_yaml_net_attach_def_all_ns"
     { oc describe network-attachment-definitions --all-namespaces; } >>"${BASE_COLLECTION_PATH}/namespaces/all/desc_net_attach_def_all_ns"
fi
